name: Train and Upload ML Model

on:
  workflow_dispatch:
    inputs:
      mode:
        description: "Training mode: yf (yfinance) or snapshot"
        required: false
        default: "yf"
      version:
        description: "Model version prefix (e.g. v1)"
        required: false
        default: "v1"
      years:
        description: "[yf] Lookback years"
        required: false
        default: "3"
      horizon:
        description: "[yf] Horizon trading days"
        required: false
        default: "20"
      up:
        description: "[yf] UP threshold (fraction, e.g. 0.05)"
        required: false
        default: "0.05"
      down:
        description: "[yf] DOWN threshold (fraction, e.g. 0.05)"
        required: false
        default: "0.05"
      max_tickers:
        description: "[yf] Max tickers to train on (to keep CI fast)"
        required: false
        default: "30"

jobs:
  train-upload:
    runs-on: ubuntu-latest
    env:
      SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
      SUPABASE_BUCKET: ${{ secrets.SUPABASE_BUCKET }}
      SUPABASE_SERVICE_ROLE: ${{ secrets.SUPABASE_SERVICE_ROLE }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: scripts/ml/requirements.txt

      - name: Install deps (fast wheels)
        env:
          PIP_DISABLE_PIP_VERSION_CHECK: '1'
          PIP_ONLY_BINARY: ":all:"
        run: |
          python -m pip install --upgrade pip
          pip install --only-binary=:all: -r scripts/ml/requirements.txt

      - name: Train model
        run: |
          MODE="${{ github.event.inputs.mode || 'yf' }}"
          if [ "$MODE" = "yf" ]; then
            python scripts/ml/train_model_yf.py \
              --out-dir ml_out \
              --version "${{ github.event.inputs.version || 'v1' }}" \
              --years "${{ github.event.inputs.years || '3' }}" \
              --horizon "${{ github.event.inputs.horizon || '20' }}" \
              --up "${{ github.event.inputs.up || '0.05' }}" \
              --down "${{ github.event.inputs.down || '0.05' }}" \
              --max-tickers "${{ github.event.inputs.max_tickers || '30' }}"
          else
            python scripts/ml/train_model.py --out-dir ml_out --version "${{ github.event.inputs.version || 'v1' }}"
          fi

      - name: List outputs
        run: |
          ls -la ml_out

      - name: Upload model to Supabase Storage (model)
        run: |
          set -euo pipefail
          MODEL_FILE=$(ls -1 ml_out/model_*.json | head -n1)
          if [ -z "$MODEL_FILE" ]; then echo "Model file not found"; exit 1; fi
          MODEL_BASENAME=$(basename "$MODEL_FILE")
          DEST_PATH="ml/models/${MODEL_BASENAME}"
          curl -sS -X POST \
            "${SUPABASE_URL%/}/storage/v1/object/${SUPABASE_BUCKET}/${DEST_PATH}" \
            -H "Authorization: Bearer ${SUPABASE_SERVICE_ROLE}" \
            -H "apikey: ${SUPABASE_SERVICE_ROLE}" \
            -H "x-upsert: true" \
            --data-binary @"${MODEL_FILE}" \
            -o /dev/null -w '%{http_code}' | tee /tmp/upcode
          code=$(cat /tmp/upcode)
          if [ "$code" != "200" ] && [ "$code" != "201" ]; then echo "Upload failed: $code"; exit 1; fi

      - name: Upload latest pointer
        run: |
          set -euo pipefail
          LATEST_FILE="ml_out/latest.json"
          if [ ! -f "$LATEST_FILE" ]; then echo "latest.json missing"; exit 1; fi
          curl -sS -X POST \
            "${SUPABASE_URL%/}/storage/v1/object/${SUPABASE_BUCKET}/ml/models/latest.json" \
            -H "Authorization: Bearer ${SUPABASE_SERVICE_ROLE}" \
            -H "apikey: ${SUPABASE_SERVICE_ROLE}" \
            -H "x-upsert: true" \
            --data-binary @"${LATEST_FILE}" \
            -o /dev/null -w '%{http_code}' | tee /tmp/upcode
          code=$(cat /tmp/upcode)
          if [ "$code" != "200" ] && [ "$code" != "201" ]; then echo "Upload failed: $code"; exit 1; fi

